package tictactoe;

import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.*;

public final class TicTacToe extends JPanel
{
    JButton buttons[] = new JButton[9]; 
    int turn = 0;// counter for x's and o's
    
    public TicTacToe()
    {
      setLayout(new GridLayout(3,3)); //setup tictactoe board of 3 rows and 3 columns
      initializebuttons(); 
    }
    
    public void initializebuttons() //fill board with empty buttons
    {
        for(int i = 0; i <= 8; i++)
        {
            buttons[i] = new JButton(); 
            buttons[i].setText("");
            buttons[i].addActionListener(new buttonListener());
            
            add(buttons[i]);         
        }
    }
    public void resetButtons()
    {
        for(int i = 0; i <= 8; i++)
        {
            buttons[i].setText(""); //clears board of x's and o's
        }
    }
    

    private class buttonListener implements ActionListener
    {
       
        @Override
        public void actionPerformed(ActionEvent e) 
        {
            
            JButton buttonClicked = (JButton)e.getSource(); //get the button that was clicked
            if(turn%2 == 0)
            {
                buttonClicked.setText("X"); //set tile to x
                if(checkForWin() == true) //check for adjacent event
            {
                JOptionPane.showMessageDialog(null, "Player 1 wins"); //print message indicating player wins
                resetButtons(); //clear board 
                turn = 0; //reset turn back to beginning
            }
            }
            if(turn%2 != 0)
            {
                buttonClicked.setText("O"); //set tile to o
                if(checkForWin() == true) 
            {
                JOptionPane.showMessageDialog(null, "Player 2 wins");
                resetButtons();
                turn = 0;
            }
            }
                
            turn++;
            if(turn == 10) //if all moves have been made without victory
            {
                JOptionPane.showMessageDialog(null, "Draw"); //print message indicating tie
                resetButtons();
                turn = 0;
            }
            }
        }

        
        public boolean checkForWin()
        {
               
            
            //horizontal win check
            if( checkAdjacent(0,1) && checkAdjacent(1,2) ) 
                return true;
            else if( checkAdjacent(3,4) && checkAdjacent(4,5) )
                return true;
            else if ( checkAdjacent(6,7) && checkAdjacent(7,8))
                return true;
            
            //vertical win check
            else if ( checkAdjacent(0,3) && checkAdjacent(3,6))
                return true;  
            else if ( checkAdjacent(1,4) && checkAdjacent(4,7))
                return true;
            else if ( checkAdjacent(2,5) && checkAdjacent(5,8))
                return true;
            
            //diagonal win check
            else if ( checkAdjacent(0,4) && checkAdjacent(4,8))
                return true;  
            else return checkAdjacent(2,4) && checkAdjacent(4,6);
            
            
        }
        
        public boolean checkAdjacent(int x, int y)
        {
            return buttons[x].getText().equals(buttons[y].getText()) && !buttons[x].getText().equals("");
        }
        
    
    
    public static void main(String[] args) 
    {
        JFrame window = new JFrame("Tic-Tac-Toe");
        window.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        window.getContentPane().add(new TicTacToe());
        window.setBounds(300,200,300,300);
        window.setVisible(true);
    }
}
